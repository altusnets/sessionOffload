# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import openoffload_pb2 as openoffload__pb2


class SessionTableStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.addSession = channel.unary_unary(
        '/openoffload.v1alpha2.SessionTable/addSession',
        request_serializer=openoffload__pb2.sessionRequest.SerializeToString,
        response_deserializer=openoffload__pb2.addSessionResponse.FromString,
        )
    self.getSession = channel.unary_unary(
        '/openoffload.v1alpha2.SessionTable/getSession',
        request_serializer=openoffload__pb2.sessionId.SerializeToString,
        response_deserializer=openoffload__pb2.sessionResponse.FromString,
        )
    self.deleteSession = channel.unary_unary(
        '/openoffload.v1alpha2.SessionTable/deleteSession',
        request_serializer=openoffload__pb2.sessionId.SerializeToString,
        response_deserializer=openoffload__pb2.sessionResponse.FromString,
        )


class SessionTableServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def addSession(self, request, context):
    """Adds a session
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getSession(self, request, context):
    """Obtains the session 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteSession(self, request, context):
    """Delete a session
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SessionTableServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'addSession': grpc.unary_unary_rpc_method_handler(
          servicer.addSession,
          request_deserializer=openoffload__pb2.sessionRequest.FromString,
          response_serializer=openoffload__pb2.addSessionResponse.SerializeToString,
      ),
      'getSession': grpc.unary_unary_rpc_method_handler(
          servicer.getSession,
          request_deserializer=openoffload__pb2.sessionId.FromString,
          response_serializer=openoffload__pb2.sessionResponse.SerializeToString,
      ),
      'deleteSession': grpc.unary_unary_rpc_method_handler(
          servicer.deleteSession,
          request_deserializer=openoffload__pb2.sessionId.FromString,
          response_serializer=openoffload__pb2.sessionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openoffload.v1alpha2.SessionTable', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SessionStatisticsTableStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAllSessions = channel.unary_stream(
        '/openoffload.v1alpha2.SessionStatisticsTable/getAllSessions',
        request_serializer=openoffload__pb2.statisticsRequestArgs.SerializeToString,
        response_deserializer=openoffload__pb2.sessionResponse.FromString,
        )
    self.getClosedSessions = channel.unary_stream(
        '/openoffload.v1alpha2.SessionStatisticsTable/getClosedSessions',
        request_serializer=openoffload__pb2.statisticsRequestArgs.SerializeToString,
        response_deserializer=openoffload__pb2.sessionResponse.FromString,
        )


class SessionStatisticsTableServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getAllSessions(self, request, context):
    """Stream back all current sessions
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getClosedSessions(self, request, context):
    """statistics as a outgoing session from the WB to Applications ?
    grpc seems to need a request input streamId is a placeholder
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SessionStatisticsTableServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAllSessions': grpc.unary_stream_rpc_method_handler(
          servicer.getAllSessions,
          request_deserializer=openoffload__pb2.statisticsRequestArgs.FromString,
          response_serializer=openoffload__pb2.sessionResponse.SerializeToString,
      ),
      'getClosedSessions': grpc.unary_stream_rpc_method_handler(
          servicer.getClosedSessions,
          request_deserializer=openoffload__pb2.statisticsRequestArgs.FromString,
          response_serializer=openoffload__pb2.sessionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openoffload.v1alpha2.SessionStatisticsTable', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ActivationStub(object):
  """
  Register OpenOffload devices with a network function. Currently multiple
  devices could be registered. For instance a SmartNIC device and a Software
  device could be registered and the operator could decide to activate one or
  the other

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.registerOffloadDevice = channel.unary_unary(
        '/openoffload.v1alpha2.Activation/registerOffloadDevice',
        request_serializer=openoffload__pb2.deviceDescription.SerializeToString,
        response_deserializer=openoffload__pb2.registrationStatus.FromString,
        )
    self.deregisterOffloadDevice = channel.unary_unary(
        '/openoffload.v1alpha2.Activation/deregisterOffloadDevice',
        request_serializer=openoffload__pb2.deviceDescription.SerializeToString,
        response_deserializer=openoffload__pb2.registrationStatus.FromString,
        )
    self.getRegistered = channel.unary_unary(
        '/openoffload.v1alpha2.Activation/getRegistered',
        request_serializer=openoffload__pb2.Empty.SerializeToString,
        response_deserializer=openoffload__pb2.deviceList.FromString,
        )
    self.activateOffload = channel.unary_unary(
        '/openoffload.v1alpha2.Activation/activateOffload',
        request_serializer=openoffload__pb2.deviceDescription.SerializeToString,
        response_deserializer=openoffload__pb2.activationStatus.FromString,
        )
    self.deactivateOffload = channel.unary_unary(
        '/openoffload.v1alpha2.Activation/deactivateOffload',
        request_serializer=openoffload__pb2.deviceDescription.SerializeToString,
        response_deserializer=openoffload__pb2.activationStatus.FromString,
        )
    self.getActivated = channel.unary_unary(
        '/openoffload.v1alpha2.Activation/getActivated',
        request_serializer=openoffload__pb2.Empty.SerializeToString,
        response_deserializer=openoffload__pb2.deviceDescription.FromString,
        )


class ActivationServicer(object):
  """
  Register OpenOffload devices with a network function. Currently multiple
  devices could be registered. For instance a SmartNIC device and a Software
  device could be registered and the operator could decide to activate one or
  the other

  """

  def registerOffloadDevice(self, request, context):
    """
    Device registeration

    Registration is the process of telling the network function that a offload device
    is available for use and some metadata about the device. The metadata is there only
    for the operator to make a decision on which device to activate.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deregisterOffloadDevice(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getRegistered(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def activateOffload(self, request, context):
    """
    Device activation

    Activation is the process of selecting a registered device and activating it on 
    the netwwork function. Currently only one network device is supported per network
    element.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deactivateOffload(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getActivated(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ActivationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'registerOffloadDevice': grpc.unary_unary_rpc_method_handler(
          servicer.registerOffloadDevice,
          request_deserializer=openoffload__pb2.deviceDescription.FromString,
          response_serializer=openoffload__pb2.registrationStatus.SerializeToString,
      ),
      'deregisterOffloadDevice': grpc.unary_unary_rpc_method_handler(
          servicer.deregisterOffloadDevice,
          request_deserializer=openoffload__pb2.deviceDescription.FromString,
          response_serializer=openoffload__pb2.registrationStatus.SerializeToString,
      ),
      'getRegistered': grpc.unary_unary_rpc_method_handler(
          servicer.getRegistered,
          request_deserializer=openoffload__pb2.Empty.FromString,
          response_serializer=openoffload__pb2.deviceList.SerializeToString,
      ),
      'activateOffload': grpc.unary_unary_rpc_method_handler(
          servicer.activateOffload,
          request_deserializer=openoffload__pb2.deviceDescription.FromString,
          response_serializer=openoffload__pb2.activationStatus.SerializeToString,
      ),
      'deactivateOffload': grpc.unary_unary_rpc_method_handler(
          servicer.deactivateOffload,
          request_deserializer=openoffload__pb2.deviceDescription.FromString,
          response_serializer=openoffload__pb2.activationStatus.SerializeToString,
      ),
      'getActivated': grpc.unary_unary_rpc_method_handler(
          servicer.getActivated,
          request_deserializer=openoffload__pb2.Empty.FromString,
          response_serializer=openoffload__pb2.deviceDescription.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openoffload.v1alpha2.Activation', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
