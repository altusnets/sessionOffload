// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openoffload.proto

#include "openoffload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openoffload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_actionType_openoffload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openoffload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_deviceDescription_openoffload_2eproto;
namespace openoffload {
namespace v1alpha2 {
class sessionIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sessionId> _instance;
} _sessionId_default_instance_;
class actionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<actionType> _instance;
} _actionType_default_instance_;
class sessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sessionRequest> _instance;
} _sessionRequest_default_instance_;
class addSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<addSessionResponse> _instance;
} _addSessionResponse_default_instance_;
class sessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sessionResponse> _instance;
} _sessionResponse_default_instance_;
class statisticsRequestArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<statisticsRequestArgs> _instance;
} _statisticsRequestArgs_default_instance_;
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class deviceDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<deviceDescription> _instance;
} _deviceDescription_default_instance_;
class deviceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<deviceList> _instance;
} _deviceList_default_instance_;
class registrationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<registrationStatus> _instance;
} _registrationStatus_default_instance_;
class activationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<activationStatus> _instance;
} _activationStatus_default_instance_;
}  // namespace v1alpha2
}  // namespace openoffload
static void InitDefaultsscc_info_Empty_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_Empty_default_instance_;
    new (ptr) ::openoffload::v1alpha2::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Empty_openoffload_2eproto}, {}};

static void InitDefaultsscc_info_actionType_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_actionType_default_instance_;
    new (ptr) ::openoffload::v1alpha2::actionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::actionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_actionType_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_actionType_openoffload_2eproto}, {}};

static void InitDefaultsscc_info_activationStatus_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_activationStatus_default_instance_;
    new (ptr) ::openoffload::v1alpha2::activationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::activationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_activationStatus_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_activationStatus_openoffload_2eproto}, {
      &scc_info_deviceDescription_openoffload_2eproto.base,}};

static void InitDefaultsscc_info_addSessionResponse_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_addSessionResponse_default_instance_;
    new (ptr) ::openoffload::v1alpha2::addSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::addSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_addSessionResponse_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_addSessionResponse_openoffload_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_deviceDescription_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_deviceDescription_default_instance_;
    new (ptr) ::openoffload::v1alpha2::deviceDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::deviceDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_deviceDescription_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_deviceDescription_openoffload_2eproto}, {}};

static void InitDefaultsscc_info_deviceList_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_deviceList_default_instance_;
    new (ptr) ::openoffload::v1alpha2::deviceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::deviceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_deviceList_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_deviceList_openoffload_2eproto}, {
      &scc_info_deviceDescription_openoffload_2eproto.base,}};

static void InitDefaultsscc_info_registrationStatus_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_registrationStatus_default_instance_;
    new (ptr) ::openoffload::v1alpha2::registrationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::registrationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registrationStatus_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_registrationStatus_openoffload_2eproto}, {}};

static void InitDefaultsscc_info_sessionId_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_sessionId_default_instance_;
    new (ptr) ::openoffload::v1alpha2::sessionId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::sessionId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sessionId_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sessionId_openoffload_2eproto}, {}};

static void InitDefaultsscc_info_sessionRequest_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_sessionRequest_default_instance_;
    new (ptr) ::openoffload::v1alpha2::sessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::sessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_sessionRequest_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_sessionRequest_openoffload_2eproto}, {
      &scc_info_actionType_openoffload_2eproto.base,}};

static void InitDefaultsscc_info_sessionResponse_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_sessionResponse_default_instance_;
    new (ptr) ::openoffload::v1alpha2::sessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::sessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_sessionResponse_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_sessionResponse_openoffload_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_statisticsRequestArgs_openoffload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openoffload::v1alpha2::_statisticsRequestArgs_default_instance_;
    new (ptr) ::openoffload::v1alpha2::statisticsRequestArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openoffload::v1alpha2::statisticsRequestArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_statisticsRequestArgs_openoffload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_statisticsRequestArgs_openoffload_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openoffload_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openoffload_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openoffload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openoffload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionId, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::actionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::actionType, actiontype_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::actionType, actionnexthop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, inlif_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, outlif_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, ipversion_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, sourceip_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, sourceport_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, destinationip_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, destinationport_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, protocolid_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::addSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::addSessionResponse, sessionid_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::addSessionResponse, requeststatus_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::addSessionResponse, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, sessionid_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, inpackets_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, outpackets_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, inbytes_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, outbytes_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, sessionstate_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, sessionclosecode_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, requeststatus_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, starttime_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::sessionResponse, endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::statisticsRequestArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::statisticsRequestArgs, pagesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::deviceDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::deviceDescription, name_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::deviceDescription, type_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::deviceDescription, description_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::deviceDescription, sessioncapacity_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::deviceDescription, sessionrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::deviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::deviceList, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::registrationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::registrationStatus, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::activationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::activationStatus, status_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v1alpha2::activationStatus, device_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openoffload::v1alpha2::sessionId)},
  { 6, -1, sizeof(::openoffload::v1alpha2::actionType)},
  { 13, -1, sizeof(::openoffload::v1alpha2::sessionRequest)},
  { 27, -1, sizeof(::openoffload::v1alpha2::addSessionResponse)},
  { 35, -1, sizeof(::openoffload::v1alpha2::sessionResponse)},
  { 50, -1, sizeof(::openoffload::v1alpha2::statisticsRequestArgs)},
  { 56, -1, sizeof(::openoffload::v1alpha2::Empty)},
  { 61, -1, sizeof(::openoffload::v1alpha2::deviceDescription)},
  { 71, -1, sizeof(::openoffload::v1alpha2::deviceList)},
  { 77, -1, sizeof(::openoffload::v1alpha2::registrationStatus)},
  { 83, -1, sizeof(::openoffload::v1alpha2::activationStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_sessionId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_actionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_sessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_addSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_sessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_statisticsRequestArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_deviceDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_deviceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_registrationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v1alpha2::_activationStatus_default_instance_),
};

const char descriptor_table_protodef_openoffload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021openoffload.proto\022\024openoffload.v1alpha"
  "2\032\037google/protobuf/timestamp.proto\"\036\n\tse"
  "ssionId\022\021\n\tsessionId\030\001 \001(\003\"Z\n\nactionType"
  "\0225\n\nactionType\030\001 \001(\0162!.openoffload.v1alp"
  "ha2.ACTION_TYPE\022\025\n\ractionNextHop\030\002 \001(\t\"\243"
  "\002\n\016sessionRequest\022\r\n\005inLif\030\001 \001(\r\022\016\n\006outL"
  "if\030\002 \001(\r\0223\n\tipVersion\030\003 \001(\0162 .openoffloa"
  "d.v1alpha2.IP_VERSION\022\020\n\010sourceIp\030\004 \001(\014\022"
  "\022\n\nsourcePort\030\005 \001(\r\022\025\n\rdestinationIp\030\006 \001"
  "(\014\022\027\n\017destinationPort\030\007 \001(\r\0225\n\nprotocolI"
  "d\030\010 \001(\0162!.openoffload.v1alpha2.PROTOCOL_"
  "ID\0220\n\006action\030\t \001(\0132 .openoffload.v1alpha"
  "2.actionType\"\223\001\n\022addSessionResponse\022\021\n\ts"
  "essionId\030\001 \001(\003\022;\n\rrequestStatus\030\002 \001(\0162$."
  "openoffload.v1alpha2.REQUEST_STATUS\022-\n\ts"
  "tartTime\030\003 \001(\0132\032.google.protobuf.Timesta"
  "mp\"\206\003\n\017sessionResponse\022\021\n\tsessionId\030\001 \001("
  "\003\022\021\n\tinPackets\030\002 \001(\003\022\022\n\noutPackets\030\003 \001(\003"
  "\022\017\n\007inBytes\030\004 \001(\003\022\020\n\010outBytes\030\005 \001(\003\0229\n\014s"
  "essionState\030\006 \001(\0162#.openoffload.v1alpha2"
  ".SESSION_STATE\022B\n\020sessionCloseCode\030\007 \001(\016"
  "2(.openoffload.v1alpha2.SESSION_CLOSE_CO"
  "DE\022;\n\rrequestStatus\030\010 \001(\0162$.openoffload."
  "v1alpha2.REQUEST_STATUS\022-\n\tstartTime\030\t \001"
  "(\0132\032.google.protobuf.Timestamp\022+\n\007endTim"
  "e\030\n \001(\0132\032.google.protobuf.Timestamp\")\n\025s"
  "tatisticsRequestArgs\022\020\n\010pageSize\030\001 \001(\005\"\007"
  "\n\005Empty\"\230\001\n\021deviceDescription\022\014\n\004name\030\001 "
  "\001(\t\0222\n\004type\030\002 \001(\0162$.openoffload.v1alpha2"
  ".INTERFACE_TYPE\022\023\n\013description\030\003 \001(\t\022\027\n\017"
  "sessionCapacity\030\004 \001(\005\022\023\n\013sessionRate\030\005 \001"
  "(\005\"F\n\ndeviceList\0228\n\007devices\030\001 \003(\0132\'.open"
  "offload.v1alpha2.deviceDescription\"T\n\022re"
  "gistrationStatus\022>\n\006status\030\001 \001(\0162..openo"
  "ffload.v1alpha2.REGISTRATION_STATUS_TYPE"
  "\"\211\001\n\020activationStatus\022<\n\006status\030\001 \001(\0162,."
  "openoffload.v1alpha2.ACTIVATION_STATUS_T"
  "YPE\0227\n\006device\030\002 \001(\0132\'.openoffload.v1alph"
  "a2.deviceDescription*\"\n\nIP_VERSION\022\t\n\005_I"
  "PV4\020\000\022\t\n\005_IPV6\020\001*A\n\013PROTOCOL_ID\022\013\n\007_HOPO"
  "PT\020\000\022\010\n\004_TCP\020\006\022\010\n\004_UDP\020\021\"\004\010\001\020\005\"\004\010\007\020\020\"\005\010\022"
  "\020\377\001*N\n\rSESSION_STATE\022\020\n\014_ESTABLISHED\020\000\022\016"
  "\n\n_CLOSING_1\020\001\022\016\n\n_CLOSING_2\020\002\022\013\n\007_CLOSE"
  "D\020\003*J\n\022SESSION_CLOSE_CODE\022\017\n\013_NOT_CLOSED"
  "\020\000\022\013\n\007_FINACK\020\001\022\010\n\004_RST\020\002\022\014\n\010_TIMEOUT\020\003*"
  "\231\001\n\016REQUEST_STATUS\022\r\n\t_ACCEPTED\020\000\022\r\n\t_RE"
  "JECTED\020\001\022!\n\035_REJECTED_SESSION_NONEXISTEN"
  "T\020\002\022 \n\034_REJECTED_SESSION_TABLE_FULL\020\003\022$\n"
  " _REJECTED_SESSION_ALREADY_EXISTS\020\004*\?\n\013A"
  "CTION_TYPE\022\t\n\005_DROP\020\000\022\014\n\010_FORWARD\020\001\022\013\n\007_"
  "MIRROR\020\002\022\n\n\006_SNOOP\020\003*C\n\016INTERFACE_TYPE\022\t"
  "\n\005_NONE\020\000\022\r\n\t_SOFTWARE\020\001\022\r\n\t_SMARTNIC\020\002\022"
  "\010\n\004_NOS\020\003*H\n\026ACTIVATION_STATUS_TYPE\022\025\n\021_"
  "DEVICE_ACTIVATED\020\000\022\027\n\023_DEVICE_DEACTIVATE"
  "D\020\001*L\n\030REGISTRATION_STATUS_TYPE\022\026\n\022_DEVI"
  "CE_REGISTERED\020\000\022\030\n\024_DEVICE_DEREGISTERED\020"
  "\0012\241\002\n\014SessionTable\022^\n\naddSession\022$.openo"
  "ffload.v1alpha2.sessionRequest\032(.openoff"
  "load.v1alpha2.addSessionResponse\"\000\022V\n\nge"
  "tSession\022\037.openoffload.v1alpha2.sessionI"
  "d\032%.openoffload.v1alpha2.sessionResponse"
  "\"\000\022Y\n\rdeleteSession\022\037.openoffload.v1alph"
  "a2.sessionId\032%.openoffload.v1alpha2.sess"
  "ionResponse\"\0002\357\001\n\026SessionStatisticsTable"
  "\022h\n\016getAllSessions\022+.openoffload.v1alpha"
  "2.statisticsRequestArgs\032%.openoffload.v1"
  "alpha2.sessionResponse\"\0000\001\022k\n\021getClosedS"
  "essions\022+.openoffload.v1alpha2.statistic"
  "sRequestArgs\032%.openoffload.v1alpha2.sess"
  "ionResponse\"\0000\0012\367\004\n\nActivation\022l\n\025regist"
  "erOffloadDevice\022\'.openoffload.v1alpha2.d"
  "eviceDescription\032(.openoffload.v1alpha2."
  "registrationStatus\"\000\022n\n\027deregisterOffloa"
  "dDevice\022\'.openoffload.v1alpha2.deviceDes"
  "cription\032(.openoffload.v1alpha2.registra"
  "tionStatus\"\000\022^\n\033getRegisteredOffloadDevi"
  "ces\022\033.openoffload.v1alpha2.Empty\032 .openo"
  "ffload.v1alpha2.deviceList\"\000\022d\n\017activate"
  "Offload\022\'.openoffload.v1alpha2.deviceDes"
  "cription\032&.openoffload.v1alpha2.activati"
  "onStatus\"\000\022f\n\021deactivateOffload\022\'.openof"
  "fload.v1alpha2.deviceDescription\032&.openo"
  "ffload.v1alpha2.activationStatus\"\000\022]\n\023ge"
  "tActivatedOffload\022\033.openoffload.v1alpha2"
  ".Empty\032\'.openoffload.v1alpha2.deviceDesc"
  "ription\"\000B\030Z\026.;openoffload_v1alpha2b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openoffload_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openoffload_2eproto_sccs[11] = {
  &scc_info_Empty_openoffload_2eproto.base,
  &scc_info_actionType_openoffload_2eproto.base,
  &scc_info_activationStatus_openoffload_2eproto.base,
  &scc_info_addSessionResponse_openoffload_2eproto.base,
  &scc_info_deviceDescription_openoffload_2eproto.base,
  &scc_info_deviceList_openoffload_2eproto.base,
  &scc_info_registrationStatus_openoffload_2eproto.base,
  &scc_info_sessionId_openoffload_2eproto.base,
  &scc_info_sessionRequest_openoffload_2eproto.base,
  &scc_info_sessionResponse_openoffload_2eproto.base,
  &scc_info_statisticsRequestArgs_openoffload_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openoffload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openoffload_2eproto = {
  false, false, descriptor_table_protodef_openoffload_2eproto, "openoffload.proto", 3443,
  &descriptor_table_openoffload_2eproto_once, descriptor_table_openoffload_2eproto_sccs, descriptor_table_openoffload_2eproto_deps, 11, 1,
  schemas, file_default_instances, TableStruct_openoffload_2eproto::offsets,
  file_level_metadata_openoffload_2eproto, 11, file_level_enum_descriptors_openoffload_2eproto, file_level_service_descriptors_openoffload_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openoffload_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openoffload_2eproto)), true);
namespace openoffload {
namespace v1alpha2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IP_VERSION_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[0];
}
bool IP_VERSION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROTOCOL_ID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[1];
}
bool PROTOCOL_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 6:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SESSION_STATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[2];
}
bool SESSION_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SESSION_CLOSE_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[3];
}
bool SESSION_CLOSE_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* REQUEST_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[4];
}
bool REQUEST_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACTION_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[5];
}
bool ACTION_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* INTERFACE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[6];
}
bool INTERFACE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACTIVATION_STATUS_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[7];
}
bool ACTIVATION_STATUS_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* REGISTRATION_STATUS_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[8];
}
bool REGISTRATION_STATUS_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void sessionId::InitAsDefaultInstance() {
}
class sessionId::_Internal {
 public:
};

sessionId::sessionId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.sessionId)
}
sessionId::sessionId(const sessionId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_ = from.sessionid_;
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.sessionId)
}

void sessionId::SharedCtor() {
  sessionid_ = PROTOBUF_LONGLONG(0);
}

sessionId::~sessionId() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.sessionId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sessionId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sessionId::ArenaDtor(void* object) {
  sessionId* _this = reinterpret_cast< sessionId* >(object);
  (void)_this;
}
void sessionId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sessionId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sessionId& sessionId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sessionId_openoffload_2eproto.base);
  return *internal_default_instance();
}


void sessionId::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.sessionId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sessionId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sessionId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.sessionId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sessionId = 1;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.sessionId)
  return target;
}

size_t sessionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.sessionId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sessionId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.sessionId)
  GOOGLE_DCHECK_NE(&from, this);
  const sessionId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sessionId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.sessionId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.sessionId)
    MergeFrom(*source);
  }
}

void sessionId::MergeFrom(const sessionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.sessionId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
}

void sessionId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.sessionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sessionId::CopyFrom(const sessionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.sessionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sessionId::IsInitialized() const {
  return true;
}

void sessionId::InternalSwap(sessionId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sessionid_, other->sessionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sessionId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void actionType::InitAsDefaultInstance() {
}
class actionType::_Internal {
 public:
};

actionType::actionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.actionType)
}
actionType::actionType(const actionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionnexthop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actionnexthop().empty()) {
    actionnexthop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_actionnexthop(),
      GetArena());
  }
  actiontype_ = from.actiontype_;
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.actionType)
}

void actionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_actionType_openoffload_2eproto.base);
  actionnexthop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actiontype_ = 0;
}

actionType::~actionType() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.actionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void actionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  actionnexthop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void actionType::ArenaDtor(void* object) {
  actionType* _this = reinterpret_cast< actionType* >(object);
  (void)_this;
}
void actionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void actionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const actionType& actionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_actionType_openoffload_2eproto.base);
  return *internal_default_instance();
}


void actionType::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.actionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionnexthop_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actiontype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* actionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openoffload.v1alpha2.ACTION_TYPE actionType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actiontype(static_cast<::openoffload::v1alpha2::ACTION_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // string actionNextHop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_actionnexthop();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openoffload.v1alpha2.actionType.actionNextHop"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* actionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.actionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openoffload.v1alpha2.ACTION_TYPE actionType = 1;
  if (this->actiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_actiontype(), target);
  }

  // string actionNextHop = 2;
  if (this->actionnexthop().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionnexthop().data(), static_cast<int>(this->_internal_actionnexthop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openoffload.v1alpha2.actionType.actionNextHop");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_actionnexthop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.actionType)
  return target;
}

size_t actionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.actionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionNextHop = 2;
  if (this->actionnexthop().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionnexthop());
  }

  // .openoffload.v1alpha2.ACTION_TYPE actionType = 1;
  if (this->actiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actiontype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void actionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.actionType)
  GOOGLE_DCHECK_NE(&from, this);
  const actionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<actionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.actionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.actionType)
    MergeFrom(*source);
  }
}

void actionType::MergeFrom(const actionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.actionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actionnexthop().size() > 0) {
    _internal_set_actionnexthop(from._internal_actionnexthop());
  }
  if (from.actiontype() != 0) {
    _internal_set_actiontype(from._internal_actiontype());
  }
}

void actionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.actionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void actionType::CopyFrom(const actionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.actionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool actionType::IsInitialized() const {
  return true;
}

void actionType::InternalSwap(actionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actionnexthop_.Swap(&other->actionnexthop_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(actiontype_, other->actiontype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata actionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sessionRequest::InitAsDefaultInstance() {
  ::openoffload::v1alpha2::_sessionRequest_default_instance_._instance.get_mutable()->action_ = const_cast< ::openoffload::v1alpha2::actionType*>(
      ::openoffload::v1alpha2::actionType::internal_default_instance());
}
class sessionRequest::_Internal {
 public:
  static const ::openoffload::v1alpha2::actionType& action(const sessionRequest* msg);
};

const ::openoffload::v1alpha2::actionType&
sessionRequest::_Internal::action(const sessionRequest* msg) {
  return *msg->action_;
}
sessionRequest::sessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.sessionRequest)
}
sessionRequest::sessionRequest(const sessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourceip().empty()) {
    sourceip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sourceip(),
      GetArena());
  }
  destinationip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destinationip().empty()) {
    destinationip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destinationip(),
      GetArena());
  }
  if (from._internal_has_action()) {
    action_ = new ::openoffload::v1alpha2::actionType(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&inlif_, &from.inlif_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocolid_) -
    reinterpret_cast<char*>(&inlif_)) + sizeof(protocolid_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.sessionRequest)
}

void sessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sessionRequest_openoffload_2eproto.base);
  sourceip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destinationip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocolid_) -
      reinterpret_cast<char*>(&action_)) + sizeof(protocolid_));
}

sessionRequest::~sessionRequest() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.sessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourceip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destinationip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_;
}

void sessionRequest::ArenaDtor(void* object) {
  sessionRequest* _this = reinterpret_cast< sessionRequest* >(object);
  (void)_this;
}
void sessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sessionRequest& sessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sessionRequest_openoffload_2eproto.base);
  return *internal_default_instance();
}


void sessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.sessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destinationip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  ::memset(&inlif_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocolid_) -
      reinterpret_cast<char*>(&inlif_)) + sizeof(protocolid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 inLif = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          inlif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 outLif = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outlif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.IP_VERSION ipVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ipversion(static_cast<::openoffload::v1alpha2::IP_VERSION>(val));
        } else goto handle_unusual;
        continue;
      // bytes sourceIp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sourceip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sourcePort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sourceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes destinationIp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_destinationip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 destinationPort = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          destinationport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.PROTOCOL_ID protocolId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocolid(static_cast<::openoffload::v1alpha2::PROTOCOL_ID>(val));
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.actionType action = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.sessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 inLif = 1;
  if (this->inlif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_inlif(), target);
  }

  // uint32 outLif = 2;
  if (this->outlif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_outlif(), target);
  }

  // .openoffload.v1alpha2.IP_VERSION ipVersion = 3;
  if (this->ipversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ipversion(), target);
  }

  // bytes sourceIp = 4;
  if (this->sourceip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sourceip(), target);
  }

  // uint32 sourcePort = 5;
  if (this->sourceport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sourceport(), target);
  }

  // bytes destinationIp = 6;
  if (this->destinationip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_destinationip(), target);
  }

  // uint32 destinationPort = 7;
  if (this->destinationport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_destinationport(), target);
  }

  // .openoffload.v1alpha2.PROTOCOL_ID protocolId = 8;
  if (this->protocolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_protocolid(), target);
  }

  // .openoffload.v1alpha2.actionType action = 9;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.sessionRequest)
  return target;
}

size_t sessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.sessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sourceIp = 4;
  if (this->sourceip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sourceip());
  }

  // bytes destinationIp = 6;
  if (this->destinationip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destinationip());
  }

  // .openoffload.v1alpha2.actionType action = 9;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // uint32 inLif = 1;
  if (this->inlif() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inlif());
  }

  // uint32 outLif = 2;
  if (this->outlif() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outlif());
  }

  // .openoffload.v1alpha2.IP_VERSION ipVersion = 3;
  if (this->ipversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ipversion());
  }

  // uint32 sourcePort = 5;
  if (this->sourceport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sourceport());
  }

  // uint32 destinationPort = 7;
  if (this->destinationport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_destinationport());
  }

  // .openoffload.v1alpha2.PROTOCOL_ID protocolId = 8;
  if (this->protocolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocolid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.sessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const sessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.sessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.sessionRequest)
    MergeFrom(*source);
  }
}

void sessionRequest::MergeFrom(const sessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.sessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceip().size() > 0) {
    _internal_set_sourceip(from._internal_sourceip());
  }
  if (from.destinationip().size() > 0) {
    _internal_set_destinationip(from._internal_destinationip());
  }
  if (from.has_action()) {
    _internal_mutable_action()->::openoffload::v1alpha2::actionType::MergeFrom(from._internal_action());
  }
  if (from.inlif() != 0) {
    _internal_set_inlif(from._internal_inlif());
  }
  if (from.outlif() != 0) {
    _internal_set_outlif(from._internal_outlif());
  }
  if (from.ipversion() != 0) {
    _internal_set_ipversion(from._internal_ipversion());
  }
  if (from.sourceport() != 0) {
    _internal_set_sourceport(from._internal_sourceport());
  }
  if (from.destinationport() != 0) {
    _internal_set_destinationport(from._internal_destinationport());
  }
  if (from.protocolid() != 0) {
    _internal_set_protocolid(from._internal_protocolid());
  }
}

void sessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.sessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sessionRequest::CopyFrom(const sessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.sessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sessionRequest::IsInitialized() const {
  return true;
}

void sessionRequest::InternalSwap(sessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sourceip_.Swap(&other->sourceip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destinationip_.Swap(&other->destinationip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sessionRequest, protocolid_)
      + sizeof(sessionRequest::protocolid_)
      - PROTOBUF_FIELD_OFFSET(sessionRequest, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void addSessionResponse::InitAsDefaultInstance() {
  ::openoffload::v1alpha2::_addSessionResponse_default_instance_._instance.get_mutable()->starttime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class addSessionResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& starttime(const addSessionResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
addSessionResponse::_Internal::starttime(const addSessionResponse* msg) {
  return *msg->starttime_;
}
void addSessionResponse::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
addSessionResponse::addSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.addSessionResponse)
}
addSessionResponse::addSessionResponse(const addSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_starttime()) {
    starttime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requeststatus_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(requeststatus_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.addSessionResponse)
}

void addSessionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_addSessionResponse_openoffload_2eproto.base);
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requeststatus_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(requeststatus_));
}

addSessionResponse::~addSessionResponse() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.addSessionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void addSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete starttime_;
}

void addSessionResponse::ArenaDtor(void* object) {
  addSessionResponse* _this = reinterpret_cast< addSessionResponse* >(object);
  (void)_this;
}
void addSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const addSessionResponse& addSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_addSessionResponse_openoffload_2eproto.base);
  return *internal_default_instance();
}


void addSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.addSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requeststatus_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(requeststatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.REQUEST_STATUS requestStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requeststatus(static_cast<::openoffload::v1alpha2::REQUEST_STATUS>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addSessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.addSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sessionId = 1;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sessionid(), target);
  }

  // .openoffload.v1alpha2.REQUEST_STATUS requestStatus = 2;
  if (this->requeststatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_requeststatus(), target);
  }

  // .google.protobuf.Timestamp startTime = 3;
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::starttime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.addSessionResponse)
  return target;
}

size_t addSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.addSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp startTime = 3;
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // int64 sessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sessionid());
  }

  // .openoffload.v1alpha2.REQUEST_STATUS requestStatus = 2;
  if (this->requeststatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requeststatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.addSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const addSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.addSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.addSessionResponse)
    MergeFrom(*source);
  }
}

void addSessionResponse::MergeFrom(const addSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.addSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_starttime()) {
    _internal_mutable_starttime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_starttime());
  }
  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.requeststatus() != 0) {
    _internal_set_requeststatus(from._internal_requeststatus());
  }
}

void addSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.addSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addSessionResponse::CopyFrom(const addSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.addSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addSessionResponse::IsInitialized() const {
  return true;
}

void addSessionResponse::InternalSwap(addSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addSessionResponse, requeststatus_)
      + sizeof(addSessionResponse::requeststatus_)
      - PROTOBUF_FIELD_OFFSET(addSessionResponse, starttime_)>(
          reinterpret_cast<char*>(&starttime_),
          reinterpret_cast<char*>(&other->starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sessionResponse::InitAsDefaultInstance() {
  ::openoffload::v1alpha2::_sessionResponse_default_instance_._instance.get_mutable()->starttime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::openoffload::v1alpha2::_sessionResponse_default_instance_._instance.get_mutable()->endtime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class sessionResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& starttime(const sessionResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& endtime(const sessionResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
sessionResponse::_Internal::starttime(const sessionResponse* msg) {
  return *msg->starttime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
sessionResponse::_Internal::endtime(const sessionResponse* msg) {
  return *msg->endtime_;
}
void sessionResponse::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
void sessionResponse::clear_endtime() {
  if (GetArena() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
}
sessionResponse::sessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.sessionResponse)
}
sessionResponse::sessionResponse(const sessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_starttime()) {
    starttime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  if (from._internal_has_endtime()) {
    endtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.endtime_);
  } else {
    endtime_ = nullptr;
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requeststatus_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(requeststatus_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.sessionResponse)
}

void sessionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sessionResponse_openoffload_2eproto.base);
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requeststatus_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(requeststatus_));
}

sessionResponse::~sessionResponse() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.sessionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete starttime_;
  if (this != internal_default_instance()) delete endtime_;
}

void sessionResponse::ArenaDtor(void* object) {
  sessionResponse* _this = reinterpret_cast< sessionResponse* >(object);
  (void)_this;
}
void sessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sessionResponse& sessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sessionResponse_openoffload_2eproto.base);
  return *internal_default_instance();
}


void sessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.sessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  if (GetArena() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requeststatus_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(requeststatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inPackets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inpackets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 outPackets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          outpackets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inBytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          inbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 outBytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          outbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.SESSION_STATE sessionState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sessionstate(static_cast<::openoffload::v1alpha2::SESSION_STATE>(val));
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.SESSION_CLOSE_CODE sessionCloseCode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sessionclosecode(static_cast<::openoffload::v1alpha2::SESSION_CLOSE_CODE>(val));
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.REQUEST_STATUS requestStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requeststatus(static_cast<::openoffload::v1alpha2::REQUEST_STATUS>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp startTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp endTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.sessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sessionId = 1;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sessionid(), target);
  }

  // int64 inPackets = 2;
  if (this->inpackets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_inpackets(), target);
  }

  // int64 outPackets = 3;
  if (this->outpackets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_outpackets(), target);
  }

  // int64 inBytes = 4;
  if (this->inbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_inbytes(), target);
  }

  // int64 outBytes = 5;
  if (this->outbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_outbytes(), target);
  }

  // .openoffload.v1alpha2.SESSION_STATE sessionState = 6;
  if (this->sessionstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sessionstate(), target);
  }

  // .openoffload.v1alpha2.SESSION_CLOSE_CODE sessionCloseCode = 7;
  if (this->sessionclosecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sessionclosecode(), target);
  }

  // .openoffload.v1alpha2.REQUEST_STATUS requestStatus = 8;
  if (this->requeststatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_requeststatus(), target);
  }

  // .google.protobuf.Timestamp startTime = 9;
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::starttime(this), target, stream);
  }

  // .google.protobuf.Timestamp endTime = 10;
  if (this->has_endtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::endtime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.sessionResponse)
  return target;
}

size_t sessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.sessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp startTime = 9;
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // .google.protobuf.Timestamp endTime = 10;
  if (this->has_endtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtime_);
  }

  // int64 sessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sessionid());
  }

  // int64 inPackets = 2;
  if (this->inpackets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inpackets());
  }

  // int64 outPackets = 3;
  if (this->outpackets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_outpackets());
  }

  // int64 inBytes = 4;
  if (this->inbytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inbytes());
  }

  // int64 outBytes = 5;
  if (this->outbytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_outbytes());
  }

  // .openoffload.v1alpha2.SESSION_STATE sessionState = 6;
  if (this->sessionstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sessionstate());
  }

  // .openoffload.v1alpha2.SESSION_CLOSE_CODE sessionCloseCode = 7;
  if (this->sessionclosecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sessionclosecode());
  }

  // .openoffload.v1alpha2.REQUEST_STATUS requestStatus = 8;
  if (this->requeststatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requeststatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.sessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const sessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.sessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.sessionResponse)
    MergeFrom(*source);
  }
}

void sessionResponse::MergeFrom(const sessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.sessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_starttime()) {
    _internal_mutable_starttime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_starttime());
  }
  if (from.has_endtime()) {
    _internal_mutable_endtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_endtime());
  }
  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.inpackets() != 0) {
    _internal_set_inpackets(from._internal_inpackets());
  }
  if (from.outpackets() != 0) {
    _internal_set_outpackets(from._internal_outpackets());
  }
  if (from.inbytes() != 0) {
    _internal_set_inbytes(from._internal_inbytes());
  }
  if (from.outbytes() != 0) {
    _internal_set_outbytes(from._internal_outbytes());
  }
  if (from.sessionstate() != 0) {
    _internal_set_sessionstate(from._internal_sessionstate());
  }
  if (from.sessionclosecode() != 0) {
    _internal_set_sessionclosecode(from._internal_sessionclosecode());
  }
  if (from.requeststatus() != 0) {
    _internal_set_requeststatus(from._internal_requeststatus());
  }
}

void sessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.sessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sessionResponse::CopyFrom(const sessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.sessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sessionResponse::IsInitialized() const {
  return true;
}

void sessionResponse::InternalSwap(sessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sessionResponse, requeststatus_)
      + sizeof(sessionResponse::requeststatus_)
      - PROTOBUF_FIELD_OFFSET(sessionResponse, starttime_)>(
          reinterpret_cast<char*>(&starttime_),
          reinterpret_cast<char*>(&other->starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void statisticsRequestArgs::InitAsDefaultInstance() {
}
class statisticsRequestArgs::_Internal {
 public:
};

statisticsRequestArgs::statisticsRequestArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.statisticsRequestArgs)
}
statisticsRequestArgs::statisticsRequestArgs(const statisticsRequestArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pagesize_ = from.pagesize_;
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.statisticsRequestArgs)
}

void statisticsRequestArgs::SharedCtor() {
  pagesize_ = 0;
}

statisticsRequestArgs::~statisticsRequestArgs() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.statisticsRequestArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void statisticsRequestArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void statisticsRequestArgs::ArenaDtor(void* object) {
  statisticsRequestArgs* _this = reinterpret_cast< statisticsRequestArgs* >(object);
  (void)_this;
}
void statisticsRequestArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void statisticsRequestArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const statisticsRequestArgs& statisticsRequestArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_statisticsRequestArgs_openoffload_2eproto.base);
  return *internal_default_instance();
}


void statisticsRequestArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.statisticsRequestArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pagesize_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* statisticsRequestArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pageSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pagesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* statisticsRequestArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.statisticsRequestArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pageSize = 1;
  if (this->pagesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pagesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.statisticsRequestArgs)
  return target;
}

size_t statisticsRequestArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.statisticsRequestArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pageSize = 1;
  if (this->pagesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagesize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void statisticsRequestArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.statisticsRequestArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const statisticsRequestArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<statisticsRequestArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.statisticsRequestArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.statisticsRequestArgs)
    MergeFrom(*source);
  }
}

void statisticsRequestArgs::MergeFrom(const statisticsRequestArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.statisticsRequestArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pagesize() != 0) {
    _internal_set_pagesize(from._internal_pagesize());
  }
}

void statisticsRequestArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.statisticsRequestArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statisticsRequestArgs::CopyFrom(const statisticsRequestArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.statisticsRequestArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statisticsRequestArgs::IsInitialized() const {
  return true;
}

void statisticsRequestArgs::InternalSwap(statisticsRequestArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pagesize_, other->pagesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata statisticsRequestArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.Empty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Empty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Empty::ArenaDtor(void* object) {
  Empty* _this = reinterpret_cast< Empty* >(object);
  (void)_this;
}
void Empty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_openoffload_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void deviceDescription::InitAsDefaultInstance() {
}
class deviceDescription::_Internal {
 public:
};

deviceDescription::deviceDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.deviceDescription)
}
deviceDescription::deviceDescription(const deviceDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionrate_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sessionrate_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.deviceDescription)
}

void deviceDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_deviceDescription_openoffload_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionrate_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sessionrate_));
}

deviceDescription::~deviceDescription() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.deviceDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void deviceDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void deviceDescription::ArenaDtor(void* object) {
  deviceDescription* _this = reinterpret_cast< deviceDescription* >(object);
  (void)_this;
}
void deviceDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void deviceDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const deviceDescription& deviceDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_deviceDescription_openoffload_2eproto.base);
  return *internal_default_instance();
}


void deviceDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.deviceDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionrate_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sessionrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deviceDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openoffload.v1alpha2.deviceDescription.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.INTERFACE_TYPE type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::openoffload::v1alpha2::INTERFACE_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openoffload.v1alpha2.deviceDescription.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sessionCapacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sessioncapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sessionRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sessionrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* deviceDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.deviceDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openoffload.v1alpha2.deviceDescription.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openoffload.v1alpha2.INTERFACE_TYPE type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openoffload.v1alpha2.deviceDescription.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // int32 sessionCapacity = 4;
  if (this->sessioncapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sessioncapacity(), target);
  }

  // int32 sessionRate = 5;
  if (this->sessionrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sessionrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.deviceDescription)
  return target;
}

size_t deviceDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.deviceDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openoffload.v1alpha2.INTERFACE_TYPE type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 sessionCapacity = 4;
  if (this->sessioncapacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sessioncapacity());
  }

  // int32 sessionRate = 5;
  if (this->sessionrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sessionrate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void deviceDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.deviceDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const deviceDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<deviceDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.deviceDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.deviceDescription)
    MergeFrom(*source);
  }
}

void deviceDescription::MergeFrom(const deviceDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.deviceDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sessioncapacity() != 0) {
    _internal_set_sessioncapacity(from._internal_sessioncapacity());
  }
  if (from.sessionrate() != 0) {
    _internal_set_sessionrate(from._internal_sessionrate());
  }
}

void deviceDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.deviceDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deviceDescription::CopyFrom(const deviceDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.deviceDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deviceDescription::IsInitialized() const {
  return true;
}

void deviceDescription::InternalSwap(deviceDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(deviceDescription, sessionrate_)
      + sizeof(deviceDescription::sessionrate_)
      - PROTOBUF_FIELD_OFFSET(deviceDescription, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata deviceDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void deviceList::InitAsDefaultInstance() {
}
class deviceList::_Internal {
 public:
};

deviceList::deviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.deviceList)
}
deviceList::deviceList(const deviceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.deviceList)
}

void deviceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_deviceList_openoffload_2eproto.base);
}

deviceList::~deviceList() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.deviceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void deviceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void deviceList::ArenaDtor(void* object) {
  deviceList* _this = reinterpret_cast< deviceList* >(object);
  (void)_this;
}
void deviceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void deviceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const deviceList& deviceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_deviceList_openoffload_2eproto.base);
  return *internal_default_instance();
}


void deviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.deviceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deviceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .openoffload.v1alpha2.deviceDescription devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* deviceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.deviceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openoffload.v1alpha2.deviceDescription devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.deviceList)
  return target;
}

size_t deviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.deviceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openoffload.v1alpha2.deviceDescription devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void deviceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.deviceList)
  GOOGLE_DCHECK_NE(&from, this);
  const deviceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<deviceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.deviceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.deviceList)
    MergeFrom(*source);
  }
}

void deviceList::MergeFrom(const deviceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.deviceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void deviceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.deviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deviceList::CopyFrom(const deviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.deviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deviceList::IsInitialized() const {
  return true;
}

void deviceList::InternalSwap(deviceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata deviceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void registrationStatus::InitAsDefaultInstance() {
}
class registrationStatus::_Internal {
 public:
};

registrationStatus::registrationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.registrationStatus)
}
registrationStatus::registrationStatus(const registrationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.registrationStatus)
}

void registrationStatus::SharedCtor() {
  status_ = 0;
}

registrationStatus::~registrationStatus() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.registrationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void registrationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void registrationStatus::ArenaDtor(void* object) {
  registrationStatus* _this = reinterpret_cast< registrationStatus* >(object);
  (void)_this;
}
void registrationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registrationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const registrationStatus& registrationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_registrationStatus_openoffload_2eproto.base);
  return *internal_default_instance();
}


void registrationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.registrationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registrationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openoffload.v1alpha2.REGISTRATION_STATUS_TYPE status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::openoffload::v1alpha2::REGISTRATION_STATUS_TYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* registrationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.registrationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openoffload.v1alpha2.REGISTRATION_STATUS_TYPE status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.registrationStatus)
  return target;
}

size_t registrationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.registrationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openoffload.v1alpha2.REGISTRATION_STATUS_TYPE status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void registrationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.registrationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const registrationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<registrationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.registrationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.registrationStatus)
    MergeFrom(*source);
  }
}

void registrationStatus::MergeFrom(const registrationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.registrationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void registrationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.registrationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registrationStatus::CopyFrom(const registrationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.registrationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registrationStatus::IsInitialized() const {
  return true;
}

void registrationStatus::InternalSwap(registrationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registrationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void activationStatus::InitAsDefaultInstance() {
  ::openoffload::v1alpha2::_activationStatus_default_instance_._instance.get_mutable()->device_ = const_cast< ::openoffload::v1alpha2::deviceDescription*>(
      ::openoffload::v1alpha2::deviceDescription::internal_default_instance());
}
class activationStatus::_Internal {
 public:
  static const ::openoffload::v1alpha2::deviceDescription& device(const activationStatus* msg);
};

const ::openoffload::v1alpha2::deviceDescription&
activationStatus::_Internal::device(const activationStatus* msg) {
  return *msg->device_;
}
activationStatus::activationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openoffload.v1alpha2.activationStatus)
}
activationStatus::activationStatus(const activationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::openoffload::v1alpha2::deviceDescription(*from.device_);
  } else {
    device_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:openoffload.v1alpha2.activationStatus)
}

void activationStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_activationStatus_openoffload_2eproto.base);
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&device_)) + sizeof(status_));
}

activationStatus::~activationStatus() {
  // @@protoc_insertion_point(destructor:openoffload.v1alpha2.activationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void activationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void activationStatus::ArenaDtor(void* object) {
  activationStatus* _this = reinterpret_cast< activationStatus* >(object);
  (void)_this;
}
void activationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void activationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const activationStatus& activationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_activationStatus_openoffload_2eproto.base);
  return *internal_default_instance();
}


void activationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v1alpha2.activationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* activationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openoffload.v1alpha2.ACTIVATION_STATUS_TYPE status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::openoffload::v1alpha2::ACTIVATION_STATUS_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // .openoffload.v1alpha2.deviceDescription device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* activationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v1alpha2.activationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openoffload.v1alpha2.ACTIVATION_STATUS_TYPE status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .openoffload.v1alpha2.deviceDescription device = 2;
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v1alpha2.activationStatus)
  return target;
}

size_t activationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v1alpha2.activationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openoffload.v1alpha2.deviceDescription device = 2;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .openoffload.v1alpha2.ACTIVATION_STATUS_TYPE status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void activationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openoffload.v1alpha2.activationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const activationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<activationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openoffload.v1alpha2.activationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openoffload.v1alpha2.activationStatus)
    MergeFrom(*source);
  }
}

void activationStatus::MergeFrom(const activationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v1alpha2.activationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::openoffload::v1alpha2::deviceDescription::MergeFrom(from._internal_device());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void activationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openoffload.v1alpha2.activationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activationStatus::CopyFrom(const activationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v1alpha2.activationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activationStatus::IsInitialized() const {
  return true;
}

void activationStatus::InternalSwap(activationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(activationStatus, status_)
      + sizeof(activationStatus::status_)
      - PROTOBUF_FIELD_OFFSET(activationStatus, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata activationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha2
}  // namespace openoffload
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::sessionId* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::sessionId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::sessionId >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::actionType* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::actionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::actionType >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::sessionRequest* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::sessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::sessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::addSessionResponse* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::addSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::addSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::sessionResponse* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::sessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::sessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::statisticsRequestArgs* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::statisticsRequestArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::statisticsRequestArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::Empty* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::deviceDescription* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::deviceDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::deviceDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::deviceList* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::deviceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::deviceList >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::registrationStatus* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::registrationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::registrationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v1alpha2::activationStatus* Arena::CreateMaybeMessage< ::openoffload::v1alpha2::activationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v1alpha2::activationStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
