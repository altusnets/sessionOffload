// Copyright (C) 2020 AT&T Intellectual Property. All rights reserved.
// Copyright (C) 2020 Palo Alto Networks Intellectual Property. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


syntax = "proto3";

// will move to v1 at release 
// increment beta1 to beta2 , etc for changes during development

package openoffload.v1alpha3;

option go_package = ".;openoffload_v1alpha3";

import "google/protobuf/timestamp.proto";

enum IP_VERSION{
   _IPV4 = 0;
   _IPV6 = 1;
}

enum PROTOCOL_ID {
  _HOPOPT = 0;
  _TCP = 6;
  _UDP = 17;
  reserved 1 to 5, 7 to 16, 18 to 255 ;
}

enum SESSION_STATE {
  _ESTABLISHED = 0;
  _CLOSING_1   = 1;
  _CLOSING_2   = 2;
  _CLOSED      = 3;
}
 
enum SESSION_CLOSE_CODE {
  _NOT_CLOSED = 0;
  _FINACK     = 1;
  _RST        = 2;
  _TIMEOUT    = 3;
}

enum REQUEST_STATUS{
   _ACCEPTED = 0;
   _REJECTED = 1;
   _REJECTED_SESSION_NONEXISTENT = 2;
   _REJECTED_SESSION_TABLE_FULL = 3;
   _REJECTED_SESSION_ALREADY_EXISTS = 4;
}

enum ACTION_TYPE{
   _DROP = 0;
   _FORWARD = 1;
   _MIRROR = 2;
   _SNOOP = 3;
}


service SessionTable {


// Adds a session
rpc addSession(sessionRequest) returns (addSessionResponse) {}

// Obtains the session 
rpc getSession(sessionId) returns (sessionResponse) {}

// Delete a session
rpc deleteSession(sessionId) returns (sessionResponse) {}

}


service SessionStatisticsTable {
// Stream back all current sessions
rpc getAllSessions(statisticsRequestArgs) returns (stream sessionResponse) {}

// statistics as a outgoing session from the WB to Applications ?
// grpc seems to need a request input streamId is a placeholder
rpc getClosedSessions(statisticsRequestArgs) returns (stream sessionResponse) {}


}

// should the Application assign the sessionID on AddSession and avoid conflicts
// or have the applications have a mechanism to avoid duplicate sessionIDs across 
// applications since there will be many applications instances to 1 switch
message sessionId{
  int64 sessionId = 1;
}

// MIRROR and SNOOP require an actionNextHop
// DROP and FORWARD do not have an actionNextHop
message actionParameters{
     ACTION_TYPE  actionType = 1;
     string actionNextHop = 2;
}

// sessionId is returned by server side upon successful addSession
message sessionRequest{
  uint64  sessionId = 1 ;
  int32  inLif = 2;
  int32  outLif = 3;
  IP_VERSION ipVersion = 4;
  bytes sourceIp = 5;
  uint32 sourcePort = 6;
  bytes destinationIp = 7;
  uint32 destinationPort = 8;
  PROTOCOL_ID protocolId = 9;
  actionParameters action = 10;
}



message addSessionResponse{
  REQUEST_STATUS requestStatus = 1;
  google.protobuf.Timestamp startTime = 2;
}

message sessionResponse{
  uint64  sessionId = 1 ;
  uint64  inPackets = 2 ;
  uint64  outPackets = 3 ;
  uint64  inBytes  = 4 ;
  uint64  outBytes = 5;
  SESSION_STATE sessionState = 6 ;
  SESSION_CLOSE_CODE sessionCloseCode = 7 ;
  REQUEST_STATUS requestStatus = 8;
  google.protobuf.Timestamp startTime = 9;
  google.protobuf.Timestamp endTime = 10;
}

message statisticsRequestArgs{
  //  pageSize = 0 will turn off paging
  //  does paging make sense for a stream ?
  //  the client should read/process each event on the stream anyway.
  uint32  pageSize=100;
  uint32  page=1;
  //  what other arguments make sense for retrieving or filtering streams 
}
//////////////////////////////////////////////////////////////////////////////////
//
// Activation Service
//
enum INTERFACE_TYPE{
  _NONE = 0;
  _SOFTWARE = 1;
  _SMARTNIC = 2;
  _NOS    = 3; 
}


enum ACTIVATION_STATUS_TYPE {
  _DEVICE_ACTIVATED = 0;
  _DEVICE_DEACTIVATED = 1;
}

enum REGISTRATION_STATUS_TYPE {
  _DEVICE_REGISTERED = 0;
  _DEVICE_DEREGISTERED = 1;
}
//
// Empty message simulating void
message Empty {

}
service Activation {
  //
  // Register OpenOffload devices with a network function. Currently multiple
  // devices could be registered. For instance a SmartNIC device and a Software
  // device could be registered and the operator could decide to activate one or
  // the other
  //

  // 
  // Device registeration
  //
  // Registration is the process of telling the network function that a offload device
  // is available for use and some metadata about the device. The metadata is there only
  // for the operator to make a decision on which device to activate.
  //
  rpc registerOffloadDevice(deviceDescription) returns (registrationStatus){}
  rpc deregisterOffloadDevice(deviceDescription) returns (registrationStatus){}
  rpc getRegisteredOffloadDevices(Empty) returns (deviceList) {}
  //
  // Device activation
  //
  // Activation is the process of selecting a registered device and activating it on 
  // the netwwork function. Currently only one network device is supported per network
  // element.
  //
  rpc activateOffload(deviceDescription) returns (activationStatus) {}
  rpc deactivateOffload(deviceDescription) returns (activationStatus) {}
  rpc getActivatedOffload(Empty) returns (deviceDescription) {}
}
//
//
message deviceDescription {
  string name = 1;
  INTERFACE_TYPE type = 2;
  string description = 3;
  int32  sessionCapacity = 4;
  int32  sessionRate = 5;
  int32 tcpSessionTimeout =  6;
  int32 udpSessionTimeout = 7;
}

//
// List of Offload devices available to be activated
//
message deviceList {
  repeated deviceDescription devices = 1;
}
//
// Status of a registration request
//
message registrationStatus {
  REGISTRATION_STATUS_TYPE status = 1;
}
//
// Status of registration de-registration
// may want to expand to include reason for failures
//
message activationStatus {
  ACTIVATION_STATUS_TYPE status = 1;
  deviceDescription device = 2;
}
